


/**
 * ***********************************************
 *      section chart
 * ***********************************************
 */

document.addEventListener("DOMContentLoaded", function () {
    function createSparkChart(chartId, salesData, labels, totalSalesId) {
        var ctx = document.getElementById(chartId).getContext('2d');

        var totalSales = salesData.reduce((acc, val) => acc + val, 0);
        document.getElementById(totalSalesId).innerText = ' $' + totalSales;

        var sparkChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Sparkline',
                    data: salesData,
                    borderColor: 'rgba(255, 99, 132, 1)', // The color of the line's border.
                    backgroundColor: 'rgba(98, 40, 192, 0.534)', // The fill color under the line.
                    borderWidth: 1, // The width of the line's border.
                    fill: true,
                    lineTension: 0.4,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        radius: 2
                    },
                    line: {
                        tension: 0.4  // Smooth the line
                    }
                },
                plugins: {
                    legend: {
                        display: false  // Hide the legend
                    },
                    tooltip: {
                        enabled: true  // Disable tooltips
                    }
                },
                scales: {
                    x: {
                        display: false  // Hide the x-axis
                    },
                    y: {
                        display: false  // Hide the y-axis
                    }
                }
            }
        });
    }

    // Initialize multiple charts with different data
    createSparkChart('sparkChart1', [12, 90, 3, 45, 50, 100, 9], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'], 'totalSales1');
    createSparkChart('sparkChart2', [5, 40, 20, 35, 25, 60, 15], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'], 'totalSales2');
    createSparkChart('sparkChart3', [60, 300, 80, 95, 75, 10, 45], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'], 'totalSales3');
    createSparkChart('sparkChart4', [50, 20, 90, 545, 15, 20, 95], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'], 'totalSales4');
    createSparkChart('sparkChart5', [60, 300, 80, 95, 75, 10, 45], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'], 'totalSales5');

    // Add more calls to createSparkChart as needed with different data and element IDs
});


/**
 * ***********************************************
 *      seting chart items
 * ***********************************************
 */
var options = {
    chart: {
        height: 300,
        type: "area"
    },
    dataLabels: {
        enabled: false
    },
    series: [
        {
            name: "Series 1",
            data: [45, 52, 38, 45, 19, 23, 2, 33, 34, 44, 11, 42]
        }
    ],
    fill: {
        type: "gradient",
        gradient: {
            shadeIntensity: 1,
            opacityFrom: 0.7,
            opacityTo: 0.9,
            stops: [0, 90, 100]
        }
    },
    xaxis: {
        categories: [
            "01 يناير",
            "02 فبراير",
            "03 مارس",
            "04 ابريل",
            "05 مايو",
            "06 يونيو",
            "07 يويليو",
            "08 اغسطس",
            "09 سبتمبر",
            "10 اكتوبر",
            "11 نوفمبر",
            "12 ديسمبر",
        ]
    }
};
var chart_0 = new ApexCharts(document.querySelector("#chart-1"), options);
chart_0.render();
var options = {
    chart: {
        height: 90,
        type: "area",
        toolbar: {
            show: true
        }
    },
    dataLabels: {
        enabled: false
    },

    series: [
        {
            name: "Series 1",
            data: [45, 52,]
        }
    ],
    fill: {
        type: "gradient",
        gradient: {
            shadeIntensity: 1,
            opacityFrom: 0.7,
            opacityTo: 0.9,
            stops: [0, 90, 100]
        }
    },
    xaxis: {
        categories: [

        ],
        show: false // Hide the X-axis

    },
    tooltip: {
        enabled: true,
    }
};
var chart_6 = new ApexCharts(document.querySelector("#chart-6"), options);
var chart_2 = new ApexCharts(document.querySelector("#chart-2"), options);
var chart_3 = new ApexCharts(document.querySelector("#chart-3"), options);
var chart_4 = new ApexCharts(document.querySelector("#chart-4"), options);
var chart_5 = new ApexCharts(document.querySelector("#chart-5"), options);
chart_2.render();
chart_3.render();
chart_4.render();
chart_5.render();
chart_6.render();









$(document).ready(function () {
    const createChart = (chartId, detailsId, chartData) => {
        const myChart = document.getElementById(chartId);
        const ul = document.getElementById(detailsId);
        new Chart(myChart, {
            type: 'doughnut',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'Order Status',
                    data: chartData.data,
                    backgroundColor: chartData.colors, // Add colors
                }],
            },
            options: {
                borderWidth: 10,
                borderRadius: 2,
                hoverBorderWidth: 0,
                plugins: {
                    legend: {
                        display: false,
                    },
                },
            },

        });

        const populateUl = () => {
            chartData.labels.forEach((label, i) => {
                let li = document.createElement('li');

                // Remove percentage sign for chart1 and chart4
                if (chartId === 'chart1' || chartId === 'chart4') {
                    li.innerHTML = `<span class='percentage'>${chartData.data[i]}</span> ${label}`;
                } else {
                    li.innerHTML = `<span class='percentage'>${chartData.data[i]}%</span> ${label}`;
                }

                li.style.backgroundColor = chartData.colors[i];

                // Only for chart2 and chart3, add an extra span
                if (chartId === 'chart2' || chartId === 'chart3' || chartId === 'chart4') {
                    let extraSpan = document.createElement('span');
                    extraSpan.className = 'extra-color';
                    extraSpan.style.backgroundColor = chartData.colors[i];
                    li.appendChild(extraSpan);
                }

                ul.appendChild(li);
            });
        };
        populateUl();
    };

    const chartData1 = {
        data: [30, 17, 10],
        labels: ["المستلمة", "الفعلية", "المرفوضة"],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    const chartData2 = {
        data: [20, 60, 30],
        labels: ["الماكولات الغربية", "است فود", "الماكولات الاسيوية"],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    const chartData3 = {
        data: [60, 40],
        labels: ["الطلبات التي تم رفضها", "الطلبات التي تم قبولها"],
        colors: ["#FF6384", "#36A2EB"], // Add colors
    };
    const chartData4 = {
        data: [60, 40, 10],
        labels: ["حوالة بنكية", "الدفع النقدي", "اخرى"],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    // Add more chart data as needed

    createChart('chart1', 'details1', chartData1);
    createChart('chart2', 'details2', chartData2);
    createChart('chart3', 'details3', chartData3);
    createChart('chart4', 'details4', chartData4);
    // Call createChart with different data for more charts
});










// Chart.js Line Chart
var ctx = document.getElementById('myChart2').getContext('2d');

var monthlyData = {
    labels: ['ديسمبر', 'نوفمبر', 'اكتوبر', 'سبتمبر', 'اغسطس', 'يوليو', 'يونيو', 'مايو', 'ابريل', 'مارس', 'فبراير', 'يناير'],
    datasets: [{
        label: 'التقرير الشهري',
        data: [12, 19, 3, 5, 2, 30, 14, 55, 65, 66, 65, 12, 19, 3, 5, 2, 30, 14, 55, 65, 66, 65, 12, 19, 3, 5, 2, 30, 14, 55, 65, 66, 65],
        borderColor: 'rgba(255, 99, 132, 1)',
        backgroundColor: 'rgba(98, 40, 192, 0.534)',
        borderWidth: 1,
        fill: true,
        lineTension: 0.4,
    }]
};

var yearlyData = {
    labels: ['2018', '2019', '2020', '2021', '2022', '2023', '2024'],
    // datasets: [{
    //     label: 'Yearly Dataset',
    //     data: [120, 190, 30, 50, 20, 300],
    //     borderColor: 'rgba(54, 162, 235, 1)',
    //     backgroundColor: 'rgba(98, 40, 192, 0.534)',
    //     borderWidth: 3,
    //     fill: true,
    // }]
    datasets: [{
        label: 'التقرير السنوي', // The label for the dataset, displayed in the legend and tooltips.
        data: [12, 19, 3, 5, 2, 30, 14], // The data values for the dataset.
        borderColor: 'rgba(255, 99, 132, 1)', // The color of the line's border.
        backgroundColor: 'rgba(98, 40, 192, 0.534)', // The fill color under the line.
        borderWidth: 2, // The width of the line's border.
        fill: true, // Whether to fill the area under the line.
        lineTension: 0.4, // The line's tension, which controls the amount of curve.
        borderDash: [], // Defines the dash pattern of the line.
        borderDashOffset: 0.0, // The offset for the line's dash pattern.
        borderCapStyle: 'butt', // The style of the line's end caps. Options: 'butt', 'round', 'square'.
        borderJoinStyle: 'miter', // The style of the line's joins. Options: 'miter', 'bevel', 'round'.
        cubicInterpolationMode: 'default', // How to interpolate values. Options: 'default', 'monotone'.
        stepped: false, // Whether the line is stepped.
        spanGaps: false, // Whether to span gaps in the data.
        pointBorderColor: 'rgba(0, 0, 0, 0.1)', // The border color of the points.
        pointBackgroundColor: '#fff', // The background color of the points.
        pointBorderWidth: 1, // The border width of the points.
        pointRadius: 3, // The radius of the points.
        pointHoverRadius: 4, // The radius of the points when hovered.
        pointHitRadius: 1, // The radius of the points for hit detection.
        pointStyle: 'circle', // The style of the points. Options: 'circle', 'cross', 'crossRot', 'dash', 'line', 'rect', 'rectRounded', 'rectRot', 'star', 'triangle'.
        pointRotation: 0, // The rotation of the points in degrees.
        pointHoverBackgroundColor: 'rgba(255, 99, 132, 1)', // The background color of the points when hovered.
        pointHoverBorderColor: 'rgba(255, 99, 132, 1)', // The border color of the points when hovered.
        pointHoverBorderWidth: 1, // The border width of the points when hovered.

        hoverBackgroundColor: 'rgba(255, 99, 132, 0.2)', // The background color of the points when the dataset is hovered.
        hoverBorderColor: 'rgba(255, 99, 132, 1)', // The border color of the points when the dataset is hovered.
        hoverBorderWidth: 2, // The border width of the points when the dataset is hovered.
        hoverRadius: 4, // The radius of the points when the dataset is hovered.

        hitRadius: 1, // The extra radius added to points for hit detection.
        showLine: true, // Whether to show the line for this dataset.
        tension: 0.4, // Bezier curve tension (alias for lineTension).

        order: 0, // The drawing order of this dataset. Lowest number drawn first.
        // xAxisID: 'x-axis-0', // The ID of the x-axis to plot this dataset on.
        // yAxisID: 'y-axis-0', // The ID of the y-axis to plot this dataset on.
    }]

};

var chart = new Chart(ctx, {
    type: 'line',
    data: monthlyData,
    options: {
        scales: {
            y: {
                beginAtZero: true,
                title: {
                    display: true,
                    text: ''
                }
            },
            x: {
                title: {
                    display: true,
                    text: ''
                }
            }
        },
        plugins: {
            legend: {
                display: false  // Hide the legend
            },
            // tooltip: {
            //     enabled: false  // Disable tooltips
            // }
        },
    }

});

// Function to add boundary line
function addBoundaryLine(chart, boundaryValue) {
    const boundaryDataset = {
        type: 'line',
        label: 'Boundary',
        data: Array(chart.data.labels.length).fill(boundaryValue),
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
        fill: false,
        borderDash: [5, 5]
    };

    // Remove existing boundary dataset if it exists
    chart.data.datasets = chart.data.datasets.filter(dataset => dataset.label !== 'Boundary');
    chart.data.datasets.push(boundaryDataset);
}

// Function to update the chart based on the selected data type
function updateChart(timeframe) {
    if (timeframe === "monthly") {
        chart.data = monthlyData;
        chart.options.scales.x.title.text = '';
    } else if (timeframe === "yearly") {
        chart.data = yearlyData;
        chart.options.scales.x.title.text = '';
    }
    addBoundaryLine(chart, 10); // Add the boundary line again
    chart.update();
}



// Initially add the boundary line
addBoundaryLine(chart, 10);



$(document).ready(function () {
    const createChart = (chartId, detailsId, chartData) => {
        const myChart = document.getElementById(chartId);
        const ul = document.getElementById(detailsId);

        // Custom plugin to display text in the center for chart1 only
        const centerTextPlugin = {
            id: 'centerText',
            afterDraw(chart) {
                if (chart.canvas.id !== 'chart1') return;
                const { width, height, ctx } = chart;
                ctx.restore();
                const fontSize = (height / 0).toFixed(2);
                ctx.font = `${fontSize}em sans-serif`;
                ctx.textBaseline = 'middle';
                ctx.fillStyle = 'blue'; // Set the text color to red

                const total = chartData.data.reduce((acc, val) => acc + val, 0);
                const text = `${total}%`;
                const textX = Math.round((width - ctx.measureText(text).width) / 2);
                const textY = height / 2;

                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        };

        new Chart(myChart, {
            type: 'bar',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'التقرير السنوي', // The label for the dataset, displayed in the legend and tooltips.
                    data: [10, 2, 30, 40,], // The data values for the dataset.
                    borderColor: 'rgba(255, 99, 132, 1)', // The color of the line's border.
                    backgroundColor: 'rgba(98, 40, 192, 0.534)', // The fill color under the line.
                    borderWidth: 0, // The width of the line's border.
                    fill: true, // Whether to fill the area under the line. 
                }],
            },
            options: {
                borderWidth: 10,
                borderRadius: 2,
                hoverBorderWidth: 0,
                plugins: {
                    legend: {
                        display: false,
                    },
                },
            },
            plugins: [centerTextPlugin],
        });

        const populateUl = () => {
            chartData.labels.forEach((label, i) => {
                let li = document.createElement('li');
                li.innerHTML = `<span class='percentage'>${chartData.data[i]}%</span> ${label}`;
                li.style.backgroundColor = chartData.colors[i];

                // Only for chart2 and chart3, add an extra span
                if (chartId === 'chart2' || chartId === 'chart3' || chartId === 'chart4') {
                    let extraSpan = document.createElement('span');
                    extraSpan.className = 'extra-color';
                    extraSpan.style.backgroundColor = chartData.colors[i];
                    li.appendChild(extraSpan);
                }

                ul.appendChild(li);
            });
        };
        populateUl();
    };

    const chartData15 = {
        data: [100, 100, 100, 23, 34, 54],
        labels: ['', '', ''],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    const chartData2 = {
        data: [20, 60, 30],
        labels: ["الماكولات الغربية", "است فود", "الماكولات الاسيوية"],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    const chartData3 = {
        data: [60, 40],
        labels: ["الطلبات التي تم رفضها", "الطلبات التي تم قبولها"],
        colors: ["#FF6384", "#36A2EB"], // Add colors
    };
    const chartData4 = {
        data: [22, 34, 26, 88, 77],
        labels: ["حوالة بنكية", "الدفع النقدي", "اخرى"],
        colors: ["#FF6384", "#36A2EB", "#FFCE56"], // Add colors
    };
    // Add more chart data as needed

    createChart('chart15', 'details15', chartData15);

    // Call createChart with different data for more charts
});